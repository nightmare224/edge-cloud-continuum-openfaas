- name: Enviornment config
  sysctl:
    name: net.ipv4.conf.all.forwarding
    value: '1'
    sysctl_set: true

- name: Install dependency
  block:
  - name: Install required packages
    apt:
      name:
        - curl
        - runc
        - bridge-utils
        - iptables
      state: latest
      update_cache: yes
  - name: Create /opt/cni/bin/ directory if it does not exist
    file:
      path: /opt/cni/bin/
      state: directory
      mode: '0755'
  - name: Install cni plugins
    unarchive:
      src: cni-plugins-linux-arm64-{{ cni_version }}.tgz
      dest: /opt/cni/bin/
      creates: /opt/cni/bin/bridge
  - name: Install containerd
    unarchive:
      src: containerd-{{ containerd_version }}-linux-arm64.tar.gz
      dest: /usr/local/bin/
      creates: /usr/local/bin/containerd
  - name: Config containerd
    copy:
      src: containerd-{{ containerd_version }}.service
      dest: /etc/systemd/system/containerd.service
  - name: Start containerd
    systemd_service:
      state: started
      enabled: true
      name: containerd
      masked: no

- block:
  - name: Check if the file exists
    stat:
      path: /boot/firmware/cmdline.txt
    register: file_status
  - name: Check if the file exists
    stat:
      path: /boot/firmware/cmdline.txt
    register: file_status
  - name: Add cgroup flags
    lineinfile:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.*)(?<!cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1)$'  # Match lines that do not end with the word
      # line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'  # Append the word at the end of the line
      line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
      backrefs: yes
    register: cgroup_flag
    when: file_status.stat.exists
  - name: Reboot if change
    ansible.builtin.reboot:
      reboot_timeout: 600
    when: cgroup_flag.changed and file_status
  become: yes


- name: Upload faasd required file
  copy:
    src: "{{ item.src }}"
    dest: /home/{{ ansible_user }}/app/{{ item.dest }}
  loop:
    - src: faasd/docker-compose.yaml
      dest: faasd/
    - src: faasd/prometheus.yml
      dest: faasd/
    - src: faasd/alert.rules.yml
      dest: faasd/
    - src: faasd/alertmanager.yml
      dest: faasd/
    - src: faasd/resolv.conf
      dest: faasd/
    - src: faasd/hack/faasd.service
      dest: faasd/hack/
    - src: faasd/hack/faasd-provider.service
      dest: faasd/hack/

- name: Upload faasd binary execution file
  copy:
    src: faasd/faasd
    dest: /usr/local/bin/faasd
    mode: '0755'
    force: true
  tags: faasd_update

- name: Start faasd
  command: faasd install
  args:
    chdir: /home/{{ ansible_user }}/app/faasd
  tags: faasd_update
  
# don't know why it will not work for the first time, require restart
# - name: Restart faasd provider
#   ansible.builtin.systemd_service:
#     state: restarted
#     daemon_reload: true
#     name: faasd-provider