---
- block:
  - name: Check if the k3s server service is running
    command: systemctl is-active --quiet k3s
    register: k3s_master_status
    when: "'k3s_master' in group_names" 
    failed_when: false
  - name: Check if the k3s agent service is running
    command: systemctl is-active --quiet k3s-agent  
    register: k3s_worker_status
    when: "'k3s_worker' in group_names" 
    failed_when: false
  ignore_errors: true
  
# - name: Make sure a systemd-resolved is running
#   ansible.builtin.systemd_service:
#     state: started
#     name: systemd-resolved
#     enabled: true
  
- block:
  - name: Check if the file exists
    stat:
      path: /boot/firmware/cmdline.txt
    register: file_status
  - name: Check if the file exists
    stat:
      path: /boot/firmware/cmdline.txt
    register: file_status
  - name: Add cgroup flags
    lineinfile:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.*)(?<!cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1)$'  # Match lines that do not end with the word
      # line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'  # Append the word at the end of the line
      line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
      backrefs: yes
    register: cgroup_flag
    when: file_status.stat.exists
  - name: Reboot if change
    ansible.builtin.reboot:
      reboot_timeout: 600
    when: cgroup_flag.changed and file_status
  become: yes

- name: Copy the install script
  copy:
    src: get.k3s.io.sh
    dest: /tmp/get.k3s.io.sh
    mode: '0755'

- name: Copy K3S master config file
  template:
    src: config-server.yaml
    dest: /home/{{ ansible_user }}/infra/config-server.yaml
  become: yes
  when: "'k3s_master' in group_names and k3s_master_status.rc != 0"


- name: Copy K3S agent config file
  template:
    src: config-agent.yaml
    dest: /home/{{ ansible_user }}/infra/config-agent.yaml
  become: yes
  when: "'k3s_worker' in group_names and k3s_worker_status.rc != 0 "

- name: Install K3s master
  shell: /tmp/get.k3s.io.sh
  environment:
    INSTALL_K3S_EXEC: "--config=/home/{{ ansible_user }}/infra/config-server.yaml" 
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  args:
    executable: sh
  timeout: 60
  become: yes
  when: "'k3s_master' in group_names and k3s_master_status.rc != 0" 

- block:
  - name: Fetch the token of K3S master
    fetch:
      src: /var/lib/rancher/k3s/server/token
      dest: "{{ role_path }}/files/token/{{ group_names[1] }}"
      flat: true
    become: yes
  - name: Fetch the hostname of K3S master
    copy:
      content: "{{ ansible_host }}"
      dest: "{{ role_path }}/files/hostname/{{ group_names[1] }}"
    delegate_to: localhost
  when: "'k3s_master' in group_names"

- block:
  - name: Install K3s worker (centralized)
    shell: /tmp/get.k3s.io.sh
    environment:
      INSTALL_K3S_EXEC: "--config=/home/{{ ansible_user }}/infra/config-agent.yaml" 
      INSTALL_K3S_VERSION: "{{ k3s_version }}"
      K3S_TOKEN: "{{ lookup('file', 'token/cloud_cluster1') }}"
      K3S_URL: "https://{{ lookup('file', 'hostname/cloud_cluster1') }}:10443"
    args:
      executable: sh
    when: "architecture == 'centralized'"
  - name: Install K3s worker (federated)
    shell: /tmp/get.k3s.io.sh
    environment:
      INSTALL_K3S_EXEC: "--config=/home/{{ ansible_user }}/infra/config-agent.yaml" 
      INSTALL_K3S_VERSION: "{{ k3s_version }}"
      K3S_TOKEN: "{{ lookup('file', 'token/' + group_names[1]) }}"
      K3S_URL: "https://{{ lookup('file', 'hostname/' + group_names[1]) }}:10443"
    args:
      executable: sh
    when: "architecture == 'federated'"
  become: yes
  when: "'k3s_worker' in group_names and k3s_worker_status.rc != 0"